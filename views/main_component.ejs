<!DOCTYPE html>
<html lang="en">

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta charset="utf-8">
  <link rel="shortcut icon" href="data:image/x-icon;," type="image/x-icon">
  <title>Home Page</title>

  <link rel="stylesheet" href="/vendor/normalize-4.1.1.css" type="text/css" />
  <link rel="stylesheet" href="/vendor/border-box.css" type="text/css" />
  <link rel="stylesheet" href="/styles/layout.css" type="text/css" />
  <link rel="stylesheet" href="/styles/artist.css" type="text/css" />
  <link rel="stylesheet" href="/styles/main_component.css" type="text/css" />
  <link rel="stylesheet" href="/styles/list_area.css" type="text/css" />
  <link href="https://fonts.googleapis.com/css?family=Raleway&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

  <script type="text/javascript" src="/vendor/jquery-3.0.0.js"></script>
  <script type="text/javascript" src="/scripts/app.js"></script>
  <script type="text/javascript" src="/scripts/spotify.js"></script>
  <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=<%=googleApiKey%>&callback=initMap" async
    defer></script>
  <script type="text/javascript" src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
    crossorigin="anonymous"></script>

  <style type="text/css">
    *, *:after, *:before {
      box-sizing: border-box;
    }

    html,
    body {
      height: 100%;
      margin: 0;
      padding: 0;
    }

    /* #map {} */

    .custom-marker-container {
      /* background-color: #ffffff; */
      background: transparent;
      border: 1px dotted #000000;
      width: 40px;
      height: 40px;
      margin: 0;
      padding: 0;
      margin-right: 10px;
      cursor: url(https://maps.gstatic.com/mapfiles/openhand_8_8.cur), default;
    }

    .custom-marker-container.disabled {
      visibility: hidden;
    }

    .custom-marker-btn {
      display: inline-block;
      width: 100%;
      height: 100%;
      padding: 3px;
    }
  </style>
</head>

<body>


  <div id="mainArea">
    <% include partials/__nav %>

    <div id="listArea" class='scroll'>
      <ul>
      </ul>
      <h2>

      </h2>
    </div>



    <div id="mapArea">
      <div id="artistArea" class='scroll'>
        <div id="artists"></div>
      </div>

      <div id="map">

      </div>
    </div>
  </div>

    </main>

    <%
    let collection = concerts.map(concert => {
      let artists = concert.performers.map(performer => performer.displayName.replace(/[^a-zA-Z ]/g, '')).join(',');
      return [
        concert.songkick_event_id,
        artists
      ]
    }).join('||')

    %>

    <script type="text/javascript">

    // document.addEventListener("click", (evt) => {
    //     const artistArea = document.getElementById("artistArea");
    //     let targetElement = evt.target; // clicked element

    //     if(artistArea.style.display == 'flex') {
    //       if (targetElement !== artistArea) {
    //         artistArea.style.display = 'none'
    //         console.log("we're inside")
    //       }
    //     }
    // });

      const getMarkerListNode = (concert) => {
        return `<li id="${concert.songkick_event_id}" onclick="showArtist(this.id)">
          <div class='concertListing'>
            <img src='${concert.image640}'>
            <p class='listDetails'>
              <span class='listTitle'>${concert.concertName.split('(')[0]}</span>
              <span class='listDateArea'>
                <span class='listDate'>${concert.start.date}</span>
                <span class='listTime'>${concert.start.time}</span>
              </span>
            </p>
          </div>
        </li>`;
      };

      const renderMarkerList = (markerRes) => {
        const markers = [];
        for (let marker of markerRes) {
          const node = getMarkerListNode(marker);
          markers.push(node);
          if (marker.lat && marker.lng) addMarker(marker.lat, marker.lng, marker, redMarker);
        }
        const listNode = document.querySelector('#listArea ul');
        listNode.childNodes.forEach(n => listNode.removeChild(n));
        $(listNode).append(...markers);
      };

      // We need to retrieve the collection of artists, as well as the id of the event/concert they belong to
      let collection = "<%= collection %>".split('||').map(item => {
        let id = item.split(',')[0];
        let artists = item.split(',').slice(1)
        return {
          id,
          artists
        }
      })

      function getHashParams() {
        var hashParams = {};
        var e, r = /([^&;=]+)=?([^&;]*)/g,
          q = window.location.hash.substring(1);
        while (e = r.exec(q)) {
          hashParams[e[1]] = decodeURIComponent(e[2]);
        }
        return hashParams;
      }

      let hashParams = {};

      if (window.location.hash) {
        hashParams = getHashParams();
      }

      let artists = {}

      getArtistsInfo(collection, hashParams.access_token)
        .then(res => {
          artists = res;
          // console.log("from main_component, artists: ", artists)
        })
        .catch(e => console.error("error from getArtistInfo call: ", e))

      let showArtist = (id) => {
        // console.log("showArtist called from id ==> ", id)
        $("#artistArea").css('display', 'flex');
        // console.log("displaying artists[id][0] info ===> ", artists[id][0])
        artistDisplay(artists[id][0]);
      }

    </script>

    <script>
      const onDataLoad = () => {
        renderMarkerList(<%-JSON.stringify(concerts)%>);
      };
    </script>


    <script>
      const redMarker = 'https://maps.google.com/mapfiles/ms/icons/red-dot.png';
      const blueMarker = 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png';
      const greenMarker = 'https://maps.google.com/mapfiles/ms/icons/green-dot.png';
      const markers = [];
      const lines = [];
      let popup;
      let map;
      let customMarkerNode;

      const onMarkerClick = (evt, marker, data) => {
        console.log("Popup", marker.position.lat(), marker.position.lng(), data);
        showArtist(data.songkick_event_id);
      };

      const registerMarker = (marker, data) => {
        marker.addListener('click', evt => onMarkerClick(evt, marker, data));
        markers.push(marker);
      };

      const addMarker = (lat, lng, data, iconPath) => {
        const marker = new google.maps.Marker({ position: { lat, lng }, map, icon: { url: iconPath } });
        registerMarker(marker, data);
        return marker;
      };

      const addStop = (lat, lng, data, iconPath) => {
        const marker = addMarker(lat, lng, data, iconPath);
        if (markers.length >= 2) {
          const lineSymbol = { path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW };
          const path = [markers[markers.length - 2].position, markers[markers.length - 1].position];
          const line = new google.maps.Polyline({
            path,
            map,
            icons: [{ icon: lineSymbol }],
          });
        }
        return marker;
      }

      async function getVenueDetails(query) {
        service = new google.maps.places.PlacesService(map);

        const placesRes = await new Promise((resolve, reject) => {
          service.findPlaceFromQuery({ query, fields: ['place_id'] }, function(results, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
              resolve(results);
            } else {
              reject(status);
            }
          });
        });

        if (placesRes) {

        }

        const detailRes = await new Promise((resolve, reject) => {
          service.getDetails({ placeId: placesRes[0]['place_id'] }, function(place, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
              resolve(place);
            } else {
              reject(status);
            }
          });
        });

        return
      };

      async function initMap() {
        // const { coords } = await new Promise((res, rej) => navigator.geolocation.getCurrentPosition(res));
        map = new google.maps.Map(document.getElementById('map'), {
          // center: { lat: coords.latitude, lng: coords.longitude },
          center: { lat: 43.761539, lng: -79.411079 },
          zoom: 10
        });

        // Popup
        popup = new google.maps.InfoWindow();

        const onPopupDiscard = function(evt) {
          if (customMarkerNode) {
            customMarkerNode.classList.remove('disabled');
          }
          popup.isVisible = false;
          popup.marker.setMap(null);
          delete popup.marker;
        };

        const onPopupSave = function(evt) {
          if (customMarkerNode) {
            customMarkerNode.classList.remove('disabled');
          }
          const popupNode = document.querySelector('.custom-event-popup');
          const data = Array.from(popupNode.querySelectorAll('input[type="text"]')).map(textNode => textNode.value).join(', ');
          popup.close();
          popup.isVisible = false;
          popup.marker.setAnimation(null);
          registerMarker(popup.marker, data);
          delete popup.marker;

          console.log("Create Custom", data);
        };

        const onPopupLoad = function(evt) {
          document.querySelector('.gm-ui-hover-effect').addEventListener('click', onPopupDiscard);
          const popupNode = document.querySelector('.custom-event-popup');
          const submitBtnNode = popupNode.querySelector('button');
          submitBtnNode.addEventListener('click', onPopupSave);
        };

        const onPopupShow = function(evt) {
          if (customMarkerNode) {
            customMarkerNode.classList.add('disabled');
          }
          const marker = new google.maps.Marker({
            map: map,
            draggable: false,
            animation: google.maps.Animation.DROP,
            position: evt.latLng
          });
          const cusEventPopup = '<table class="custom-event-popup"><tr><td>Who</td><td><input type="text"/></td></tr><tr><td><label>Where</label></td><td><input type="text"/></td></tr><tr><td><label>When</label></td><td><input type="text"/></td></tr><tr></tr><tr><td colspan="2"><button type="button">Save</button></td></tr></table>'
          popup.setContent(cusEventPopup);
          popup.open(map, marker);
          popup.marker = marker;
          popup.isVisible = true;
          popup.addListener('domready', onPopupLoad);
        };


        // Add custom drop pin control
        let dropMarkerDate = null;

        customMarkerNode = document.createElement('div');
        customMarkerNode.classList.add('custom-marker-container');
        const customMarkerBtnNode = document.createElement('img');
        customMarkerBtnNode.classList.add('custom-marker-btn');
        customMarkerBtnNode.setAttribute('draggable', 'true');
        customMarkerBtnNode.setAttribute('src', 'https://maps.google.com/mapfiles/ms/icons/red-dot.png');
        customMarkerNode.append(customMarkerBtnNode);

        const mapNode = document.querySelector('#map');

        map.addListener('mouseover', (evt) => {
          const now = +new Date;
          if (now - dropMarkerDate < 3000) {
            dropMarkerDate = null;
            onPopupShow.call(this, evt);
          }
        });
        mapNode.addEventListener('dragover', function(evt) {
          evt.preventDefault();
        });
        customMarkerBtnNode.addEventListener('dragend', function(evt) {
          dropMarkerDate = +new Date;
        });
        map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(customMarkerNode);

        // Add longpress handlers
        let mPressDate = null;

        const onLongPress = function(evt) {
          const now = +new Date;
          if (!popup.isVisible && mPressDate && now - mPressDate > 300) {
            mPressDate = null;
            onPopupShow.call(this, evt);
          }
        };

        map.addListener('mousedown', function() {
          mPressDate = +new Date;
        });
        map.addListener('drag', function() {
          mPressDate = null;
        })
        map.addListener('mouseover', onLongPress);
        map.addListener('mouseup', onLongPress);

        onDataLoad();
      }

    </script>
</body>

</html>
