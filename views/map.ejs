<!DOCTYPE html>
<html>

<head>
  <meta name="viewport" content="initial-scale=1.0">
  <meta charset="utf-8">
  <link rel="shortcut icon" href="data:image/x-icon;," type="image/x-icon">
  <style>
    #map {
      height: 70%;
      max-width: 800px;
    }

    html,
    body {
      height: 100%;
      margin: 0;
      padding: 0;
    }

    .custom-marker-container {
      /* background-color: #ffffff; */
      background: transparent;
      border: 1px dotted #000000;
      width: 40px;
      height: 40px;
      margin: 0;
      padding: 0;
      margin-right: 10px;
      cursor: url(https://maps.gstatic.com/mapfiles/openhand_8_8.cur), default;
    }

    .custom-marker-container.disabled {
      visibility: hidden;
    }

    .custom-marker-btn {
      display: inline-block;
      width: 100%;
      height: 100%;
      padding: 3px;
      box-sizing: border-box;
    }
  </style>
</head>

<body>
  <div id="map"></div>
  <script>
    const redMarker = 'https://maps.google.com/mapfiles/ms/icons/red-dot.png';
    const blueMarker = 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png';
    const greenMarker = 'https://maps.google.com/mapfiles/ms/icons/green-dot.png';
    const markers = [];
    const lines = [];
    let popup;
    let map;
    let customMarkerNode;

    const onMarkerClick = (evt, marker, data) => {
      console.log("Popup", marker.position.lat(), marker.position.lng(), data);
    };

    const registerMarker = (marker, data) => {
      marker.addListener('click', evt => onMarkerClick(evt, marker, data));
      markers.push(marker);
    };

    const addMarker = (lat, lng, data, iconPath) => {
      const marker = new google.maps.Marker({ position: { lat, lng }, map, icon: { url: iconPath } });
      registerMarker(marker);
      return marker;
    };

    const addStop = (lat, lng, data, iconPath) => {
      const marker = addMarker(lat, lng, data, iconPath);
      if (markers.length >= 2) {
        const lineSymbol = { path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW };
        const path = [markers[markers.length - 2].position, markers[markers.length - 1].position];
        const line = new google.maps.Polyline({
          path,
          map,
          icons: [{ icon: lineSymbol }],
        });
      }
      return marker;
    }

    async function getVenueDetails(query) {
      service = new google.maps.places.PlacesService(map);

      const placesRes = await new Promise((resolve, reject) => {
        service.findPlaceFromQuery({ query, fields: ['place_id'] }, function(results, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            resolve(results);
          } else {
            reject(status);
          }
        });
      });

      const detailRes = await new Promise((resolve, reject) => {
        service.getDetails({ placeId: placesRes[0]['place_id'] }, function(place, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            resolve(place);
          } else {
            reject(status);
          }
        });
      });
      console.log(placesRes[0]);
      console.log(detailRes);
    };

    async function initMap() {
      // const { coords } = await new Promise((res, rej) => navigator.geolocation.getCurrentPosition(res));
      map = new google.maps.Map(document.getElementById('map'), {
        // center: { lat: coords.latitude, lng: coords.longitude },
        center: { lat: 43.761539, lng: -79.411079 },
        zoom: 10
      });

      // Popup
      popup = new google.maps.InfoWindow();

      const onPopupDiscard = function(evt) {
        if (customMarkerNode) {
          customMarkerNode.classList.remove('disabled');
        }
        popup.isVisible = false;
        popup.marker.setMap(null);
        delete popup.marker;
      };

      const onPopupSave = function(evt) {
        if (customMarkerNode) {
          customMarkerNode.classList.remove('disabled');
        }
        const popupNode = document.querySelector('.custom-event-popup');
        const data = Array.from(popupNode.querySelectorAll('input[type="text"]')).map(textNode => textNode.value).join(', ');
        popup.close();
        popup.isVisible = false;
        popup.marker.setAnimation(null);
        registerMarker(popup.marker, data);
        delete popup.marker;

        console.log("Create Custom", data);
      };

      const onPopupLoad = function(evt) {
        document.querySelector('.gm-ui-hover-effect').addEventListener('click', onPopupDiscard);
        const popupNode = document.querySelector('.custom-event-popup');
        const submitBtnNode = popupNode.querySelector('button');
        submitBtnNode.addEventListener('click', onPopupSave);
      };

      const onPopupShow = function(evt) {
        if (customMarkerNode) {
          customMarkerNode.classList.add('disabled');
        }
        const marker = new google.maps.Marker({
          map: map,
          draggable: false,
          animation: google.maps.Animation.DROP,
          position: evt.latLng
        });
        const cusEventPopup = '<table class="custom-event-popup"><tr><td>Who</td><td><input type="text"/></td></tr><tr><td><label>Where</label></td><td><input type="text"/></td></tr><tr><td><label>When</label></td><td><input type="text"/></td></tr><tr></tr><tr><td colspan="2"><button type="button">Save</button></td></tr></table>'
        popup.setContent(cusEventPopup);
        popup.open(map, marker);
        popup.marker = marker;
        popup.isVisible = true;
        popup.addListener('domready', onPopupLoad);
      };


      // Add custom drop pin control
      let dropMarkerDate = null;

      customMarkerNode = document.createElement('div');
      customMarkerNode.classList.add('custom-marker-container');
      const customMarkerBtnNode = document.createElement('img');
      customMarkerBtnNode.classList.add('custom-marker-btn');
      customMarkerBtnNode.setAttribute('draggable', 'true');
      customMarkerBtnNode.setAttribute('src', 'https://maps.google.com/mapfiles/ms/icons/red-dot.png');
      customMarkerNode.append(customMarkerBtnNode);

      const mapNode = document.querySelector('#map');

      map.addListener('mouseover', (evt) => {
        const now = +new Date;
        if (now - dropMarkerDate < 3000) {
          dropMarkerDate = null;
          onPopupShow.call(this, evt);
        }
      });
      mapNode.addEventListener('dragover', function(evt) {
        evt.preventDefault();
      });
      customMarkerBtnNode.addEventListener('dragend', function(evt) {
        dropMarkerDate = +new Date;
      });
      map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(customMarkerNode);

      // Add longpress handlers
      let mPressDate = null;

      const onLongPress = function(evt) {
        const now = +new Date;
        if (!popup.isVisible && mPressDate && now - mPressDate > 300) {
          mPressDate = null;
          onPopupShow.call(this, evt);
        }
      };

      map.addListener('mousedown', function() {
        mPressDate = +new Date;
      });
      map.addListener('drag', function() {
        mPressDate = null;
      })
      map.addListener('mouseover', onLongPress);
      map.addListener('mouseup', onLongPress);
    }

  </script>
  <script src="https://maps.googleapis.com/maps/api/js?libraries=places&key=<%=apiKey%>&callback=initMap" async
    defer></script>
</body>

</html>
