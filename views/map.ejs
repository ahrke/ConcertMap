<!DOCTYPE html>
<html>

<head>
  <meta name="viewport" content="initial-scale=1.0">
  <meta charset="utf-8">
  <link rel="shortcut icon" href="data:image/x-icon;," type="image/x-icon">
  <style>
    #map {
      height: 70%;
      max-width: 800px;
    }

    html,
    body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
  </style>
</head>

<body>
  <div id="map"></div>
  <script>
    const redMarker = 'https://maps.google.com/mapfiles/ms/icons/red-dot.png';
    const blueMarker = 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png';
    const greenMarker = 'https://maps.google.com/mapfiles/ms/icons/green-dot.png';
    const markers = [];
    const lines = [];
    let popup;
    let map;

    const onMarkerClick = (evt, marker, data) => {
      console.log(marker.position.lat(), marker.position.lng(), data);
    };

    const addMarker = (lat, lng, data, iconPath) => {
      const marker = new google.maps.Marker({ position: { lat, lng }, map, icon: { url: iconPath } });
      marker.addListener('click', evt => onMarkerClick(evt, marker, data));
      markers.push(marker);
      return marker;
    };

    const addStop = (lat, lng, data, iconPath) => {
      const marker = addMarker(lat, lng, data, iconPath);
      if (markers.length >= 2) {
        const lineSymbol = { path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW };
        const path = [markers[markers.length - 2].position, markers[markers.length - 1].position];
        const line = new google.maps.Polyline({
          path,
          map,
          icons: [{ icon: lineSymbol }],
        });
      }
      return marker;
    }

    async function initMap() {
      // const { coords } = await new Promise((res, rej) => navigator.geolocation.getCurrentPosition(res));
      map = new google.maps.Map(document.getElementById('map'), {
        // center: { lat: coords.latitude, lng: coords.longitude },
        center: { lat: 43.761539, lng: -79.411079 },
        zoom: 10
      });

      popup = new google.maps.InfoWindow();


      // Add longpress handlers
      let mPressDate = null;

      const onAddMarker = function(evt) {
        const now = +new Date;
        if (!popup.isVisible && mPressDate && now - mPressDate > 300) {
          mPressDate = null;
          const marker = addMarker(evt.latLng.lat(), evt.latLng.lng(), 'Custom Marker', redMarker);
          const cusEventPopup = '<table class="custom-event-popup"><tr><td>Who</td><td><input type="text"/></td></tr><tr><td><label>Where</label></td><td><input type="text"/></td></tr><tr><td><label>When</label></td><td><input type="text"/></td></tr><tr></tr><tr><td colspan="2"><button type="button">Save</button></td></tr></table>'
          popup.setContent(cusEventPopup);
          popup.open(map, marker);
          popup.isVisible = true;

          popup.addListener('domready', function(evt) {
            document.querySelector('.gm-ui-hover-effect').addEventListener('click', () => {
              popup.isVisible = false
            });
            const popupNode = document.querySelector('.custom-event-popup');
            const submitBtnNode = popupNode.querySelector('button');
            submitBtnNode.addEventListener('click', () => {
              const data = Array.from(popupNode.querySelectorAll('input[type="text"')).map(textNode => textNode.value).join(', ');
              console.log(data);
              popup.close();
              popup.isVisible = false;
            })
          });
        }
      };

      map.addListener('mousedown', function() {
        mPressDate = +new Date;
      });

      map.addListener('drag', function() {
        mPressDate = null;
      })
      map.addListener('mouseover', onAddMarker);
      map.addListener('mouseup', onAddMarker);
    }

  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=<%=apiKey%>&callback=initMap" async defer></script>
</body>

</html>
